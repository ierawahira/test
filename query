improvements should be done to the query :

1 - Indexing on frequently used columns in WHERE, JOIN, ORDER BY, and GROUP BY
-- Foreign keys should have indexes (job_id, affiliate_id).
-- sample : 
CREATE INDEX idx_jobs_category ON jobs (job_category_id);
CREATE INDEX idx_jobs_type ON jobs (job_type_id);
CREATE INDEX idx_jobs_publish_status ON jobs (publish_status);
CREATE INDEX idx_jobs_deleted ON jobs (deleted);
CREATE INDEX idx_jobs_sort_order ON jobs (sort_order DESC, id DESC);

2 - Avoid LIKE '%...%' Searches
-- Problem: LIKE '%キャビンアテンダント%' causes full table scans
-- Solution: Use FULLTEXT indexes

ALTER TABLE jobs ADD FULLTEXT(job_category_id, job_type_id, name, description, detail, business_skill, knowledge, location, activity, salary_statistic_group, salary_range_remarks, restriction, remarks);
ALTER TABLE personalities ADD FULLTEXT(name);
ALTER TABLE practical_skills ADD FULLTEXT(name);
ALTER TABLE basic_abilities ADD FULLTEXT(name);
ALTER TABLE affiliates ADD FULLTEXT(name);

3 - Optimize JOIN
-- Instead of LEFT JOIN for some table like jobs_personalities, jobs_practical_skills and etc try using EXISTS if the existence of related records is the only concernto reduces unnecessary JOIN
WHERE EXISTS (
    SELECT 1 FROM jobs_personalities jp
    WHERE jp.job_id = Jobs.id
    AND jp.personality_id IN (SELECT id FROM personalities WHERE name LIKE '%キャビンアテンダント%')
)

4 - Optimize GROUP BY instead of GROUP BY Jobs.id, use DISTINCT:
SELECT DISTINCT Jobs.id, Jobs.name, Jobs.sort_order
FROM jobs Jobs

5 - Run EXPLAIN ANALYZE to measure improvements